{"meta":{"code":200,"status":"success","message":null},
"data":[{"id":"e48fecce-e882-3958-a78f-1e10c69452f9","title":"HTML","step":1,
"slug":"pemrograman-front-end-web-dengan-bootstrap-html",
"sub_title":"Pemrograman Front End Web",
"course":{"id":"b85dc299-6213-3631-a9c2-c97f2f7e5494",
"title":"Pemrograman Front End Web dengan Bootstrap",
"slug":"pemrograman-front-end-web-dengan-bootstrap",
"course_test_id":"f9fce938-22b4-36ce-865b-8f3c471234c8"},
"quizzes":[{"id":"f752cdd3-dcda-39b7-ab9f-e62d4f193e2a",
"module_id":"e48fecce-e882-3958-a78f-1e10c69452f9",
"sub_module_slug_prev":null,"sub_module_slug_next":null,
"course_slug":"pemrograman-front-end-web-dengan-bootstrap",
"rules":"<p>Pastikan perangkat Anda (komputer\/laptop\/smartphone) dalam kondisi baik dan terhubung ke internet yang stabil sebelum memulai kuis.<\/p><ul><li>Gunakan browser terbaru yang didukung untuk menghindari masalah teknis selama kuis berlangsung.<\/li><\/ul>",
"module_slug":"pemrograman-front-end-web-dengan-bootstrap-html",
"total_question":1,"retry_delay":60,"user_latest_quiz":null,"user_quiz_me":null}],
"quizz_count":1,"module_question_count":3,
"sub_modules":[{"id":"52f17db2-cca0-38ed-bee6-d3fc89dc2668",
"step":1,"title":"Pengenalan HTML",
"slug":"pemrograman-front-end-web-dengan-bootstrap-html--pengenalan-html",
"sub_title":"HTML"},{"id":"f9345bf3-79a4-3d5d-a367-6d1cd3d7fc74",
"step":2,"title":"Atribut HTML & Blocks Element",
"slug":"pemrograman-front-end-web-dengan-bootstrap-html--atribut-html-blocks-element",
"sub_title":"HTML"}],"sub_module_count":2,"module_tasks":[{"id":"377d7a45-4416-32df-a3f6-7e0bd42d130b",
"point":5,"is_finish":true},{"id":"ff068945-6f35-35cf-bd6d-a1195d886ccd","point":10,"is_finish":true}],
"module_task_count":2,"is_done":null}],"success":true}



{
    "meta": {
        "code": 200,
        "status": "success",
        "message": "Berhasil fetch data"
    },
    "data": {
        "id": "bdf35f05-1162-3759-a690-8b58bf894356",
        "module_id": "3e9f6696-934b-3390-a7f5-0ce297736573",
        "course_slug": "ujicoaba",
        "module": "Perancangan Database 1",
        "step": 1,
        "last_step": 1,
        "title": "ERD 1",
        "slug": "framework-laravel-perancangan-database-1--erd-1",
        "sub_title": "Perancangan Database",
        "content": "{\"time\":1740978086663,\"blocks\":[{\"id\":\"btgVHnbmwW\",\"type\":\"paragraph\",\"data\":{\"text\":\"Entity Relationship Diagram (ERD) jika dibahasa indonesiakan diagram hubungan entitas merupakan diagram yang digunakan untuk perancangan suatu database dan menunjukkan relasi antar objek beserta atribut-atributnya secara detail.\"}},{\"id\":\"mUAsxzFTVJ\",\"type\":\"paragraph\",\"data\":{\"text\":\"Langkah-langkah membuat ERD\"}},{\"id\":\"NgGh3lHe9Q\",\"type\":\"paragraph\",\"data\":{\"text\":\"langkah-langkah untuk membuat sebuah entity relationship diagram adalah sebagai berikut:\"}},{\"id\":\"uo9GXKGDmd\",\"type\":\"list\",\"data\":{\"style\":\"ordered\",\"items\":[\"melakukan identifikasi dan tentukan seluruh entitas yang akan digunakanmelakukan identifikasi untuk menentukan entitas apa saja yang akan digunakan dalam diagram. Bisa memulai Langkah ini dengan membuat sebuah persegi panjang, kemudian dituliskan deskripsi singkat mengenai entitas tersebut.\",\"Identifikasi dan menjelaskan relasi dari entitasmencari entitas yang sekiranya memiliki relasi, kemudian membuat garis yang menghubungkan kedua entitas tersebut, selain itu harus menentukan relasi antara satu entitas dengan entitas lain. Symbol yang digunakan adalah belah ketupat untuk mendeskripsikan hubungan relasinya. Di Langkah ini dapat juga dijelaskan mengenai jenis relasi apa yang digunakan oleh suatu entitas, apakah entitas tersebut one to one, one to many, atau bisa juga dengan many to many.\",\"Tambahkan atribut yang diperlukansetelah menyelesaikan identifikasi dan menjelaskan relasi dari entitas, Langkah berikutnya adalah menambahkan atribut-atribut. Pastikan dalam menentukan atribut key pada setiap entitas. Lambang dari atribut key tersebut adalah bentuk oval dan memberikan deskripsi pada lambing tersebut, perlu diingat untuk atribut key deskripsi ditulis dengan garis bawah.&nbsp;\",\"Lengkapi diagramMelengkapi diagram yang telah dibuat sesuai dengan kebutuhan dari sistem atau database yang dibuat. Pada tahap ini harus lebih teliti dalam memeriksa setiap komponen, simbol, dan deskripsi yang salah atau tertukar.\"]}},{\"id\":\"hc1Zv9ltwf\",\"type\":\"paragraph\",\"data\":{\"text\":\"Contoh diagram ERD\"}},{\"id\":\"ZCwk81ubL4\",\"type\":\"image\",\"data\":{\"caption\":\"\",\"withBorder\":false,\"withBackground\":false,\"stretched\":false,\"file\":{\"url\":\"https://core.getskill.id/storage/image/wp93qNNKivdHL3kylEbVOaaZdRlgrkNjJFpUcxIF.png\"}}}],\"version\":\"2.30.6\"}",
        "url_youtube": null,
        "course_id": "9cbcc98c-ffd4-3852-9a16-d6857ff2693a",
        "course_title": "ujicoaba",
        "course_sub_title": "Framework Laravel",
        "course_sub_category": "Software Development",
        "prev": null,
        "next": null
    },
    "success": true
}


<aside className="w-72 bg-white border-r h-screen sticky top-0 overflow-y-auto overscroll-contain p-4 scrollbar-hide">
        <h2 className="text-lg font-bold mb-4">Konten Kursus</h2>
        {loadingModules ? (
          <p>Loading modules...</p>
        ) : (
          <ul className="space-y-2">
            {modules.map((mod, idx) => {
              const maxStep = progressMap[mod.slug] || 0;
              const isOpen = openModules.includes(idx);

              return (
                <li key={mod.id} className="border-b pb-2">
                  {/* Header modul */}
                  <button
                    onClick={() => toggleModule(idx)}
                    className="flex justify-between items-center w-full text-left font-semibold text-gray-800 hover:text-blue-600 p-1 rounded-md hover:bg-gray-50 transition-colors"
                  >
                    <span className="truncate">{mod.title}</span>
                    {isOpen ? (
                      <ChevronUp className="w-4 h-4 flex-shrink-0" />
                    ) : (
                      <ChevronDown className="w-4 h-4 flex-shrink-0" />
                    )}
                  </button>

                  {/* List isi modul */}
                  <AnimatePresence initial={false}>
                    {isOpen && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.2, ease: "easeInOut" }}
                        className="overflow-hidden"
                      >
                        <ul className="ml-3 mt-2 space-y-1">
                          {/* Submodules */}
                          {mod.sub_modules.map((sub) => {
                            const isActive = activeSub?.id === sub.id;
                            const isDone = sub.step <= maxStep;
                            const isUnlocked = sub.step <= maxStep + 1;

                            return (
                              <li key={sub.id}>
                                <button
                                  onClick={() =>
                                    isUnlocked && loadSubmodule(sub.slug)
                                  }
                                  disabled={!isUnlocked}
                                  className={`flex justify-between items-center w-full px-2 py-1.5 text-sm rounded 
                                    ${isDone
                                      ? "text-green-600 font-medium"
                                      : isActive
                                        ? "bg-blue-500 text-white"
                                        : isUnlocked
                                          ? "hover:bg-blue-100 text-gray-700"
                                          : "text-gray-400 cursor-not-allowed"
                                    }`}
                                >
                                  <span className="truncate">{sub.title}</span>
                                  {isDone ? (
                                    <CheckCircle className="w-4 h-4 text-green-600 flex-shrink-0" />
                                  ) : isUnlocked ? null : (
                                    <Lock className="w-4 h-4 text-gray-400 flex-shrink-0" />
                                  )}
                                </button>
                              </li>
                            );
                          })}

                          {/* Tugas */}
                          {mod.module_tasks.map((task) => {
                            const taskUnlocked = maxStep >= 1;
                            const taskDone = task.is_finish;
                            return (
                              <li key={task.id}>
                                <button
                                  disabled={!taskUnlocked}
                                  className={`flex justify-between items-center text-sm w-full px-2 py-1.5 rounded
                                    ${taskDone
                                      ? "text-green-600 font-medium"
                                      : taskUnlocked
                                        ? "hover:bg-blue-100 text-gray-700"
                                        : "text-gray-400 cursor-not-allowed"
                                    }`}
                                >
                                  <span>{`Tugas (${task.point} Poin)`}</span>
                                  {taskDone ? (
                                    <CheckCircle className="w-4 h-4 text-green-600 flex-shrink-0" />
                                  ) : taskUnlocked ? null : (
                                    <Lock className="w-4 h-4 text-gray-400 flex-shrink-0" />
                                  )}
                                </button>
                              </li>
                            );
                          })}

                          {/* Quiz */}
                          {mod.quizzes.map((quiz) => {
                            const lastStep = mod.sub_modules.reduce(
                              (a, b) => Math.max(a, b.step),
                              0
                            );
                            const quizUnlocked = maxStep >= lastStep;
                            const quizDone = !!quiz.user_latest_quiz;
                            return (
                              <li key={quiz.id}>
                                <button
                                  disabled={!quizUnlocked}
                                  className={`flex justify-between items-center text-sm w-full px-2 py-1.5 rounded
                                    ${quizDone
                                      ? "text-green-600 font-medium"
                                      : quizUnlocked
                                        ? "hover:bg-blue-100 text-gray-700"
                                        : "text-gray-400 cursor-not-allowed"
                                    }`}
                                >
                                  <span>{`Quiz (${quiz.total_question} Soal)`}</span>
                                  {quizDone ? (
                                    <CheckCircle className="w-4 h-4 text-green-600 flex-shrink-0" />
                                  ) : quizUnlocked ? null : (
                                    <Lock className="w-4 h-4 text-gray-400 flex-shrink-0" />
                                  )}
                                </button>
                              </li>
                            );
                          })}
                        </ul>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </li>
              );
            })}
          </ul>
        )}
      </aside>